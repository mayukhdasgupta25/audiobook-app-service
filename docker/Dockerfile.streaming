# Multi-stage Dockerfile for Audio Streaming Service
# Stage 1: Build stage
FROM node:18-alpine AS builder

# Install FFmpeg and dependencies
RUN apk add --no-cache \
   ffmpeg \
   ffmpeg-dev \
   python3 \
   make \
   g++ \
   && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY prisma/ ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Build TypeScript
RUN npm run build

# Stage 2: Production stage
FROM node:18-alpine AS production

# Install FFmpeg runtime
RUN apk add --no-cache \
   ffmpeg \
   && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs && \
   adduser -S streaming -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=streaming:nodejs /app/dist ./dist
COPY --from=builder --chown=streaming:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=streaming:nodejs /app/package*.json ./
COPY --from=builder --chown=streaming:nodejs /app/prisma ./prisma

# Create directories for storage and temp files
RUN mkdir -p /app/storage /app/temp && \
   chown -R streaming:nodejs /app/storage /app/temp

# Switch to non-root user
USER streaming

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
   CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the streaming service
CMD ["node", "dist/streaming-service.js"]
